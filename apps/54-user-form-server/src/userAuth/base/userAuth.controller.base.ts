/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UserAuthService } from "../userAuth.service";
import { UserAuthCreateInput } from "./UserAuthCreateInput";
import { UserAuth } from "./UserAuth";
import { UserAuthFindManyArgs } from "./UserAuthFindManyArgs";
import { UserAuthWhereUniqueInput } from "./UserAuthWhereUniqueInput";
import { UserAuthUpdateInput } from "./UserAuthUpdateInput";
import { UserDetailFindManyArgs } from "../../userDetail/base/UserDetailFindManyArgs";
import { UserDetail } from "../../userDetail/base/UserDetail";
import { UserDetailWhereUniqueInput } from "../../userDetail/base/UserDetailWhereUniqueInput";

export class UserAuthControllerBase {
  constructor(protected readonly service: UserAuthService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UserAuth })
  async createUserAuth(
    @common.Body() data: UserAuthCreateInput
  ): Promise<UserAuth> {
    return await this.service.createUserAuth({
      data: data,
      select: {
        createdAt: true,
        id: true,
        otp: true,
        pan: true,
        phoneNumber: true,
        updatedAt: true,
        verified: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [UserAuth] })
  @ApiNestedQuery(UserAuthFindManyArgs)
  async userAuths(@common.Req() request: Request): Promise<UserAuth[]> {
    const args = plainToClass(UserAuthFindManyArgs, request.query);
    return this.service.userAuths({
      ...args,
      select: {
        createdAt: true,
        id: true,
        otp: true,
        pan: true,
        phoneNumber: true,
        updatedAt: true,
        verified: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UserAuth })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async userAuth(
    @common.Param() params: UserAuthWhereUniqueInput
  ): Promise<UserAuth | null> {
    const result = await this.service.userAuth({
      where: params,
      select: {
        createdAt: true,
        id: true,
        otp: true,
        pan: true,
        phoneNumber: true,
        updatedAt: true,
        verified: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UserAuth })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUserAuth(
    @common.Param() params: UserAuthWhereUniqueInput,
    @common.Body() data: UserAuthUpdateInput
  ): Promise<UserAuth | null> {
    try {
      return await this.service.updateUserAuth({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          otp: true,
          pan: true,
          phoneNumber: true,
          updatedAt: true,
          verified: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UserAuth })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUserAuth(
    @common.Param() params: UserAuthWhereUniqueInput
  ): Promise<UserAuth | null> {
    try {
      return await this.service.deleteUserAuth({
        where: params,
        select: {
          createdAt: true,
          id: true,
          otp: true,
          pan: true,
          phoneNumber: true,
          updatedAt: true,
          verified: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/userDetails")
  @ApiNestedQuery(UserDetailFindManyArgs)
  async findUserDetails(
    @common.Req() request: Request,
    @common.Param() params: UserAuthWhereUniqueInput
  ): Promise<UserDetail[]> {
    const query = plainToClass(UserDetailFindManyArgs, request.query);
    const results = await this.service.findUserDetails(params.id, {
      ...query,
      select: {
        createdAt: true,
        dateofbirth: true,
        email: true,
        id: true,
        name: true,
        occupation: true,
        pan: true,
        updatedAt: true,

        userAuth: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/userDetails")
  async connectUserDetails(
    @common.Param() params: UserAuthWhereUniqueInput,
    @common.Body() body: UserDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userDetails: {
        connect: body,
      },
    };
    await this.service.updateUserAuth({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/userDetails")
  async updateUserDetails(
    @common.Param() params: UserAuthWhereUniqueInput,
    @common.Body() body: UserDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userDetails: {
        set: body,
      },
    };
    await this.service.updateUserAuth({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/userDetails")
  async disconnectUserDetails(
    @common.Param() params: UserAuthWhereUniqueInput,
    @common.Body() body: UserDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userDetails: {
        disconnect: body,
      },
    };
    await this.service.updateUserAuth({
      where: params,
      data,
      select: { id: true },
    });
  }
}
